//===-- MachineSubtarget.h - Define Subtarget for the Machine -------*- C++
//-*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the Machine specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_MACHINE_MACHINESUBTARGET_H
#define LLVM_LIB_TARGET_MACHINE_MACHINESUBTARGET_H

// #include "MachineFrameLowering.h"
// #include "MachineISelLowering.h"
// #include "MachineInstrInfo.h"
// #include "MachineSelectionDAGInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "MachineGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class MachineSubtarget : public MachineGenSubtargetInfo {
  virtual void anchor();
  //   MachineInstrInfo InstrInfo;
  //   MachineFrameLowering FrameLowering;
  //   MachineTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  MachineSubtarget(const Triple &TT, const std::string &CPU,
                   const std::string &FS, const TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const MachineInstrInfo *getInstrInfo() const override {
    return nullptr;
    //   return &InstrInfo;
  }
  const MachineFrameLowering *getFrameLowering() const override {
    return nullptr;
    // return &FrameLowering;
  }
  const MachineTargetLowering *getTargetLowering() const override {
    return nullptr;
    // return &TLInfo;
  }
  const MachineSelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return nullptr;
    // return &InstrInfo.getRegisterInfo();
  }
};
} // namespace llvm

#endif
